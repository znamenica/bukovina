#!/usr/bin/env ruby
#coding: utf-8

require 'yaml'
require 'date'
require 'rdoba'
require 'rdoba/dup'
require 'open-uri'
require 'nokogiri'
require 'hashie'
require 'fileutils'
require 'petrovich'
require 'mechanize'

YAML_Service = <<Y
---
вечерня:
   отпустительно:
      тропарь:
         глас: 
         текст: 
      молитва: 
утреня:
   величание: 
   канон:
      кондак:
         глас: 
         текст: 
Y

rdoba :mixin => [ :case ], :log => { :functions => [ :* ], :prefix => [ :function_name, :function_line ] }

Map = {
   /[Сс]вятител|Свтт?\.|Cвт./i => 'свт.',
   /[Пп]раведн|Правв?\./i => 'прав.',
   /[Пп]роро|Прорр?\./i => 'прор.',
   /[Аа]постол|Апп?\./i => 'ап70.',
   /[Сс]вященномучен|Сщмчч?\./i => 'сщмч.',
   /[Пп]реподобносповедни|Приспп?\./i => 'присп.',
   /[Пп]реподобномучен|Прмчч?\./i => 'прмч.',
   /[Мм]учениц|Мцц?\./i => 'мц.',
   /[Мм]ученик|Мчч?\./i => 'мч.',
   /[Пп]реподобн|Прпп?\./ => 'прп.',
   /[Бб]бессребрен|Бсрр|Бессрр?\./i => 'бср.',
   /[Сс]вято|Свв?\./i => 'прав.',
   /[Бб]лаженн|Блжж?\./i => 'блж.',
   /[Ии]споведни|Испп?\./i => 'исп.',
   /[Бб]лаговерн|Блгв?\./i => 'блгв.',
   /[Пп]атр\.?/i => 'первосвятитель',
   /[Пп]атр\.?/i => 'первосвятитель',
   /[Мм]итр\.?/i => 'святитель',
   /[Аа]рхиеп|[Ее]п\.?/i => 'святитель',
   /[Сс]вящ\.?|[Пп]ресвит/i => 'священник',
   /[Кк]н\.?/i => 'князь',
   /[Ии]гум\.?/i => 'настоятель',
   /[Ии]ером\.?/i => 'священноинок',
   /[Пп]опразднство/ => 'попразднство',
   /[Пп]рославление/ => 'прославление',
   /\bП[ёе]тра?\b/ => 'Кам',
   /\bПаве?ла?\b/ => 'Мал',
   /\bИван\b/ => 'Иоанн',
   /\bЯков\b/ => 'Иаков',
   /\bФ[ёе]о?дора?\b/ => 'Божидар',
   /\bСерг[ие][йя]/ => 'Сергий',
   /\bАлекс[еи][йя]/ => 'Бранко',
   /\bДи?митри[йя]/ => 'Земко',
   /\bФеофила?\b/ => 'Боголюб',
   /\bЗо[ья]/ => 'Зоя',
   /Дорофе[ьяи]/ => 'Богудара',
   /кельт\.?/ => 'келт.',
   /([А-ЯЁ][а-яё]+[оае]го)\.$/i => nil,
   /([А-ЯЁ][а-яё]+(?:ла|лы))\.$/i => nil,
}

Case = [
   /^Пресвитер/,
]

def ократчити_склад sklad
   if sklad =~ /^[А-ЯЁ]/
      sklad = sklad[ 0 ] << sklad[ 1..-1 ].downcase ; end

   zameny = Map.map do| k, z |
      ( popad = k.match( sklad ) ) && [ z, popad ] || nil
   end.compact

   if !zameny.empty?
      zamena = zameny.to_a.first.first
      if !zamena
         zamena = zameny.to_a.first.last.to_a.last
      end
   else
      zamena = Case.select {| k | sklad =~ k }
      if !zamena.empty?
         zamena = sklad.downcase! ; end ; end

   log - ( zamena.empty? && sklad || zamena )
end

def общя_zamena slovesa
   slovesa.split( /\s+/ ).map {| sklad | ократчити_склад sklad}.join ' ' ; end

def добава kuda, ime, necxto
   case kuda[ ime ]
   when Array
      if !kuda[ ime ].include? necxto
         kuda[ ime ] << necxto ; end
   when Hash, String
      if kuda[ ime ].is_a?( Hash ) &&
         kuda[ ime ].select {| _, necxto | necxto && !necxto.empty? }.empty?
         kuda[ ime ] = necxto
      elsif kuda[ ime ] != necxto
         kuda[ ime ] = [ kuda[ ime ], necxto ] ; end
   when NilClass
      kuda[ ime ] = necxto
   end
end

def detect_uniq_name memory
   url =
   if memory.вики
      log >> { вики: memory.вики }
      memory.вики         
   elsif memory.бытие
      log >> { бытие: memory.бытие }
      memory.бытие
   end
   memory_doc = Nokogiri::HTML( ( open url), nil, 'utf-8' )
   name = memory_doc.css( 'h1' ).text
   name = общя_zamena name.strip
   parts = name.split( /\s+/ ).select {| v | v =~ /^[А-ЯЁ]/ }

   parts =
   if memory.вики && parts.size == 3
      [ parts[ 1 ], parts[ 0 ] ]
   else
      parts[ 0, 2 ] ; end
   new = parts.map {| p | p.gsub( /[,«»\d\)\(]+/, '' ) }
   new.grep( /[А-ЯЁ]/ ) && new || name.split( /\s+/ )
rescue
   log.e
   nil ; end

def усечь_поле prisusce, *novy
   croppen = []
   novy.each do| novo |
      croppen << novo - ( prisusce & novo )
   end
   croppen
end

def поплести_память memory, person
   log + { memory: memory, нова_memory: person }
   prisusce = obsce_imja memory
   familija, prozvisce = усечь_поле prisusce, person.фамилия, person.прозвище
   memory.фамилия = familija + memory.фамилия
   memory.прозвище = prozvisce + memory.прозвище
   ( memory.описание << ( person.описание - ( memory.описание & person.описание ) ) ).uniq!
   memory.чин = ( memory.чин.split(',') + ( person.чин.split(',') - ( memory.чин.split(',') & person.чин.split(',') ) ) ).join( ',' ) rescue memory.чин || person.чин
   memory.событие.год = ( memory.событие.год.split(',') + ( person.событие.год.split(',') - ( memory.событие.год.split(',') & person.событие.год.split(',') ) ) ).join( ',' ) rescue memory.событие.год || person.событие.год
   memory.собор = memory.собор + ( person.собор - ( memory.собор & person.собор ) )
   if !memory.вики && person.вики
      memory.вики = person.вики ; end
   if !memory.бытие && person.бытие
      memory.бытие = person.бытие ; end
   if memory.отечник && person.отечник
      memory.отечник = person.отечник ; end
   memory.образ.concat усечь_поле( memory.образ, person.образ ).last
   log > { 'Суплетена память' => memory } ; end

def добавить_память memories, person
   log + { person: person }

   memories1 = memories.map do| memory |
      imeна = выделить_имя memory
      imeна_новы = выделить_имя person
      imeна_общи = imeна & imeна_новы
      vjes = imeна_общи.size
      if imeна.size < 2 && imeна_новы.size < 2 && memory.чин == person.чин
         vjes += 1 ; end
      vjes >= 2 && [ vjes, memory ] || nil
   end.compact.sort do| x, y |
      x[ 0 ] <=> y[ 0 ]
   end
   log >> { памяти: memories1 }

   if person.бытие || person.вики
      name = detect_uniq_name person
      if name
         imeна, = усечь_поле( ( выделить_имя person ), name )
         person.прозвище = imeна + person.прозвище ; end ; end

   memory = memories1.last[ 1 ] rescue nil
   if memory
      поплести_память memory, person
   else
      memories << person
      log > { 'Добавлена memory' => person } ; end
   new_person ; end

def обращение memory, sklad, vid
   rodа =
   if memory.чин =~ /мц|обр/
      [ :female ]
   elsif !memory.чин
      [ :androgynous, :male, :female ]
   else
      [ :male, :female, :androgynous ] ; end

   imja =
   rodа.each do| rod |
      petro = Petrovich.new rod
      imja =
      if vid == :imja
         petro.firstname sklad, :nominative, :genitive
      else
         petro.lastname sklad, :nominative, :genitive ; end
      if imja != sklad
         break imja ; end ; end
   imja.is_a?( Array ) && sklad || imja ; end

def search_for services, name
   service = services[ name ]
   if service
      return service ; end
   names = name.split( '/' )[ 0 ].split /\s+/

   if names.size > 1
      services.each do| key, value |
         key = key.split( '/' )[ 0 ]
         if names.reject {| n | key.include? n }.empty?
            return value ; end ; end ; end
   nil ; end

def obsce_imja memory
   [ memory.имя, memory.прозвище,
     memory.фамилия, memory.описание ].flatten.compact.uniq ; end

def выделить_имя memory
   obsce_imja( memory ).select do| imja |
      imja =~ /^[А-ЯЁ]/ ; end ; end

def assign_trops trops, memories, services
   service_tmpl = YAML.load( YAML_Service )
   trops.each do| trop |
      ( names, glas, text, cases ) = yield trop
      mls = parse_trop( memories, names, glas, text, cases ) do | cxin, names |
         log > { 'imeна тропаря' => names }
         kratk = ократчити_склад( cxin )
         kratk = kratk =~ /(.*)\.$/ && $1 || kratk
         log > { cxin: kratk }
         case names.size
         when 0
            novy = memories.select do| _, memory |
               memory.чин == kratk ; end
            novy.size > 0 && novy.last || nil
         else
            vjesy = 
            memories.map do| _, memory |
               vjes = ( выделить_имя( memory ) & names ).size * 2
               if memory.чин && memory.чин == kratk
                  vjes += 1 ; end
               [ vjes, memory ] ; end.sort do| x, y |
                  x[ 0 ] <=> y[ 0 ] ; end
            log >> { весы: vjesy }
            memory = vjesy.last && vjesy.last[ 0 ] > 1 && vjesy.last[ 1 ] || nil

            log > { память: memory }
            if memory
               imeна = names - ( выделить_имя( memory ) & names )
               memory.прозвище = imeна + memory.прозвище ; end

            memory ; end ; end

      log >> { memory: mls }

      name = "#{mls[ 1 ]}.цс_ро.yml"
      value = mls[ 2 ]
      service = search_for( services, name ) || service_tmpl.dup( :recursive )
      log >> { name: name, services: services[ name ] }
   
      case value[ 0 ]
      when 'тропарь'
         добава service['вечерня']['отпустительно'], 'тропарь',
                { 'глас' => value[ 1 ], 'текст' => value[ 2 ] }
      when 'молитва'
         добава service['вечерня']['отпустительно'], 'молитва',
                value[ 2 ]
      when 'кондак'
         добава service['утреня']['канон'], 'кондак',
                { 'глас' => value[ 1 ], 'текст' => value[ 2 ] }
      when 'величание'
         добава service['утреня'], 'величание',
                value[ 2 ]
      end
      services[ name ] = service
   end
end

def parse_trop memories, imeна, glas, text, cases
   log + { imeна: imeна, glas: glas, text: text, cases: cases }
   if imeна[ 0 ] =~ /[Ии]н/
      imeна.shift ; end
   names = imeна.map {|o| o !~ /[Тт]ропарь|[Кк]ондак|[Мм]олитва|[Вв]еличание/ && o || nil }
   kind = ( imeна - names ).last.downcase rescue nil

   cxin = names[ 0 ] =~ /^[а-яё]/ && names.shift || ''

   rod =
   if cxin =~ /мученицы|преподобной|праведной/ || names[ 0 ] =~ /Божией/i
      :female
   else
      :male ; end
   petro = Petrovich.new rod

   fname = ''
   names =
   names.select do| name |
      name =~ /[А-ЯЁ]/ &&
      name !~ /Божией|Матери|Ее|Пресвят|Богоrodице|Ея|Свято|Крещен|Священномучени/
   end.map do| name |
      def apply_cases petro, method, cases, name
         log + { petro: petro, method: method, cases: cases, name: name }
         cases = cases.is_a?( Array ) && cases || [ cases ]
         new =
         cases.each do| c |
            new = petro.send method, name, :nominative, c
            if new != name
               break new ; end ; end
         log - ( new.is_a?( Array ) && name || new ); end

      name.gsub! /[«»]+/, ''
      if fname.empty?
         fname = apply_cases petro, :firstname, cases, name
      else
         apply_cases petro, :lastname, cases, name ; end ; end

   memory = yield cxin, names
   log > { 'выбрана memory' => memory }
   names = ( memory && выделить_имя( memory ) || names )[ 0, 2 ]
   log > { 'выбраны имена' => names }
   service = ''
   imja = names.join ' '

   if !memory
      memory = new_person
      memory.имя = names.shift || imja
      memory.прозвище = names
      $stderr.print "#{memories.keys.size}. #{memory.имя}\n? "
      imja = $stdin.gets.strip
      imja = imja.empty? && memory.имя || imja
      if memories[ imja ]
         поплести_память memories[ imja ], memory
      else
         memories[ imja ] = memory ; end
      memory = memories[ imja ]

      if memory.чин =~ /мц/
         rod = :female ; end
      $stderr.print "#{rod}:\n? "
      rod1 = $stdin.gets.strip
      if !rod1.empty?
         rod = /^m/ =~ rod1 && :male || :female ; end
      petro = Petrovich.new rod
   else
      imja = memories.key memory
   end

   log > { 'imja' => imja }
   names = imja.split ' '
   fservice = petro.firstname names.shift, :dative
   if !names.empty?
      lservice = petro.lastname names.last, :dative ; end
   sluzxba = File.join( imja, [ fservice, lservice, 'служба' ].join( ' ' ) )

   if memory.помин.служба
      sluzxba = memory.помин.служба
   else
      memory.помин.служба = sluzxba
   end
   
   [ imja, sluzxba, [ kind, glas, text ] ] ; end

def заверка_прозвища person, name
   if !person.прозвище.include?( name ) && !person.фамилия.include?( name ) &&
      !person.описание.include?( name )
      person.прозвище = ( person.прозвище.split( ' ' ) << name ).join ' '
      end ; end

def new_person
   event = Hashie::Mash.new
   event.год = []
   event.дата = nil
   event.описание = nil
   memin = Hashie::Mash.new
   memin.дата = nil
   memin.описание = nil
   memin.служба = nil
   person = Hashie::Mash.new
   person.имя = ''
   person.прозвище = []
   person.фамилия = []
   person.описание = []
   person.чин = nil
   person.собор = []
   person.вики = nil
   person.бытие = nil
   person.отечник = nil
   person.образ = []
   person.событие = event
   person.помин = memin
   person ; end

def parse_tokens memories, tokens, store_name = 'вики'
   person = new_person

   nocase = false
   line = []
   sklad = nil
   tokens.each do| t |
      log > { sklad => t, 'вид склада' => sklad }
      if sklad == :скобы
         case t
         when '', 'и', '.'
         when ')'
            if !line.empty?
               god = line.join( ' ' ).gsub( / ([-\/]) /, '\1' )
               log > { Год: god }
               person.событие.год << god
               line = [] ; end
            sklad = nil
         when /^([А-ЯЁ][а-яё]+)\./
            sobor = $1.to_s.downcase
            log > { Собор: sobor }
            person.собор << sobor
         when /^([А-ЯЁ][а-яё\-]+)/
            familija = nocase && t || обращение( person, $1, :familija )
            log > { Фамилия: familija }
            person.фамилия << familija
         when /^[а-яёА-ЯЁ\dIVX\-\/]/
            line << t
         else
            log % { 'Нерешённый склад' => t }
            $stderr.puts "Нерешённый склад #{t.inspect}" ; end
      else
         case t
         when /Nocase/
            nocase = true
         when /Case/
            nocase = false
         when /^http:\/\/(.*)/
            if $1.empty?
               log > "Отмена ссылки"
               next
            else
               log > { Ссылка: t } ; end
   
            if t =~ /otechnik/
               person.отечник = t
            else
               person[ store_name ] = t ; end
         when /^и$/
            log > "Разделитель imeн"
            sklad = nil
            person = добавить_память memories, person
         when '('
            sklad = :скобы
         when /^([а-яё]+)\.$/
            cxin = $1
            log > { Чин: cxin }
            person.чин = cxin
         when /^[А-ЯЁ]/
            if person.имя.empty?
               imja = nocase && t || обращение( person, t, :imja )
               log > { Имя: imja }
               person.имя = imja
            else
               imja = nocase && t || обращение( person, t, :familija )
               log > { Прозвище: imja }
               person.прозвище.unshift imja
            end
         when /^[а-яё\dIVX\-\/]/
            imja = nocase && t || обращение( person, t, :familija )
            log > { Описание: imja }
            person.прозвище << imja
         when '.', ''
         else
            log % { 'Нерешённый склад' => t }
            $stderr.puts "Нерешённый склад #{t.inspect}" ; end
      end ; end

   # set чин
   cxin = nil
   memories.each do| person |
      if person.чин && !person.чин.empty?
         if person.чин[ -1 ] == person.чин[ -2 ]
            cxin = person.чин[ 0..-2 ]
            person.чин = cxin
         else
            cxin = person.чин ; end
      else
         person.чин = cxin ; end ; end

   # set год
   god = []
   memories.reverse.each do| person |
      if person.событие.год && !person.событие.год.empty?
         god = person.событие.год
      else
         person.событие.год = god ; end ; end ; end

def и_исключение slovo
   exceptions = [
      /ого[^А-ЯЁа-яё]*$/,
      /его[^А-ЯЁа-яё]*$/,
      /ой[^А-ЯЁа-яё]*$/,
   ]

   !exceptions.select {|s| slovo =~ s }.empty?
end

def е_исключение slovo
   exceptions = [
      /^святитель/,
      /^священник/,
      /^архимандрит/,
      /^игумен/,
      /^чтец/,
      /^иеромонах/,
      /диакон/,
      /^прославление/,
      /^в$/,
      /^крещен/,
      /^бывш/,
   ]

   !exceptions.select {|s| slovo =~ s }.empty?
end

def tokenize_line li, base
   # expanding groups
   lis = li.children.to_a.map do| li_e |
      if li_e.is_a?( Nokogiri::XML::Element ) && li_e.attr( 'href' ) =~ /group/
         url = li_e.attr( 'href' )
         uri = url =~ /^http/ && url || ( base + url )
         azbuka_group = Nokogiri::HTML( open( uri ), nil, 'utf-8' )
         ary = [ Nokogiri::XML::Text.new( 'Nocase', li_e ) ]
         ary.concat azbuka_group.css( "#featured .cont h1" ).children.to_a
         text = li_e.content
         if text =~ /(\(.*[\dIVX]+.*\))/
            ary << Nokogiri::XML::Text.new( $1.to_s, li_e ) ; end
         ary << Nokogiri::XML::Text.new( 'Case', li_e )
      else
         li_e ; end ; end.flatten

   current_uri = 'http://'
   tokens = [ current_uri ]
   lis.each do| li_e |
      link = false
      if li_e.is_a? Nokogiri::XML::Comment
         next ; end
      text = li_e.content.gsub( /["<!«»:]|--/, '' ).gsub( / +/, ' ' ).strip #NBSP to Space here
      log * ( '&'*80 )
      log >> { букы: text }
      uri =
      if li_e.is_a?( Nokogiri::XML::Element ) &&
         li_e.name == 'a'
         link = true
         if text !~ /^(?:[\dIVX]+|[^\(\),;А-Я]+[\dIVX]+)$/ &&
            li_e.attr( 'href' ) !~ /(\/(find|p-znaki|p-san|p-tip)|#)/
            log >> "Ссылка"
            url = li_e.attr( 'href' )
            url =~ /^http/ && url || ( base + url )
         else
            'http://' ; end
      else
         'http://' ; end

      t = text.split /\s+/, -1
      if tokens.size > 0 && !tokens.last.empty? &&
         tokens.last =~ /^[А-ЯЁа-яё]+$/ && tokens.last != 'и' &&
         uri == 'http://' && current_uri == uri && link &&
         !( t.empty? || t[ 0 ].empty? || t[ 0 ] == 'и' || t[ 0 ] =~ /^[А-ЯЁ]/ )

         log >> { "Прибавлена вещка" => t[ 0 ] }
         tokens.last << t.shift ; end

      if current_uri != uri
         log >> { "Добавлена ссылка" => uri }
         current_uri = uri
         tokens << uri ; end

      t.map! do| tt |
         a = tt.split( /[\(\)\.;,]/, -1 )
         tt.scan( /[\(\)\.;,]/ ) do | s |
            text = a.shift
            if s == '.' && text =~ /[а-яё]$/
               a.push( text << s )
            else
               a.push [ text, s ] ; end ; end
         a.push a.shift
      end.flatten!
      log >> { "Добавлен набор" => t } 

      tokens.concat t ; end

   log >> { tokens: tokens }
   tokens.map! {| t | ократчити_склад t }
   tokens.map!.with_index do| t, i |
      if t =~ /^[,;]$/
         tokens[ (i + 1)..-1 ].each do| tt |
            exc = tt =~ /\.\)?$/ || е_исключение( tt )
            iexc = и_исключение( tt )
#            if tt =~ /^(\(|http:\/\/.+)/ || tt =~ /\.$/ ||
            if tt =~ /^(http:\/\/.+)/ || tt =~ /\.$/ ||
               tt =~ /^[А-ЯЁ]/ && !exc && !iexc
               t = 'и'
               break
#            elsif tt =~ /^(?:http:\/\/|и|;|,)$/ || exc
            elsif iexc || exc || tt =~ /^(?:и|;|,)$/
               break ; end ; end ; end
      t !~ /^[,;]$/ && t || nil ; end.compact!

   log - ( tokens << 'и' ).flatten ; end

def to_people list
   people = {}
   list.each do| memory |
      log >> { memory: memory }
      name = ''
      if !memory.имя.empty?
         familija = memory.фамилия.select {| imja | imja =~ /^[А-ЯЁ]/ }[ 0 ]
         prozvisce = memory.прозвище.select {| imja | imja =~ /^[А-ЯЁ]/ }[ 0 ]
         log > { :фамилия => familija, :прозвище => prozvisce }
         name = [ memory.имя, prozvisce || familija ].compact.join ' ' ; end
      log >> { 'name' => name }
      log >> '*'*80

      if name.empty?
         name = ( !memory.прозвище.empty? && memory.прозвище ||
                memory.описание ).join( ' ' ) ; end
      log > { 'name selected' => name }

      if people.key? name
         поплести_память people[ name ], memory
      else
         people[ name ] = memory ; end ; end
   people ; end


def parse_azbuka memlist
   # Azbuka parsing
   log * "Parse azbuka.ru site"
   log * ( "*"*80 )
   
   tokens = []
   date_link = "http://azbyka.ru/days/#{@date.strftime( "%Y-%m-%d" )}"
   log > { azbuka_url: date_link }
   doc = open date_link
   azbuka = Nokogiri::HTML doc.read, nil, 'utf-8'
   
   ps = azbuka.css( '#calendar-wrapper .text p' )
   ps.to_a.each_index do| i |
      if i == 0
         next ; end
      p = ps[ i ]
      tokens.concat( tokenize_line p, 'http://azbyka.ru/days' ) ; end
   
   parse_tokens memlist, tokens, 'бытие'
rescue
   log.e ; end

def azbuka_trops people
   date_link = "http://azbyka.ru/days/#{@date.strftime( "%Y-%m-%d" )}"
   log > { azbuka_url: date_link }
   doc = open date_link
   azbuka = Nokogiri::HTML doc.read, nil, 'utf-8'

   # Tropasions scan
   #
   assign_trops( ( azbuka.css '.taks_block .taks_content' ),
                 people, @services ) do| trop |
      names = trop.css( 'h3' ).inner_text.strip.gsub( /[,'\(\)]+/, '' ).split( /\s+/ )
      glas = trop.css( '.glas' ).inner_text.scan( /\d+/ ).last rescue ''
      text = trop.css( 'div' ).inner_text.strip.gsub( /\s*\//, ' /' ).sub( /(?:\/\s*)?\/([^\/]+)$/, '//\1' )
      log > ( "#"*80 )
      log >> { names: names }
      [ names, glas, text, [ :dative, :genitive ] ] ; end
rescue
   log.e ; end
   
@date = Date.parse( ARGV.shift ) rescue Date.today
julian = @date.julian
day = julian.day
month = julian.month
@services = {}

Months = [ 'ЯНВАРЯ', 'ФЕВРАЛЯ', 'МАРТА', 'АПРЕЛЯ', 'МАЯ', 'ИЮНЯ',
           'ИЮЛЯ', 'АВГУСТА', 'СЕНТЯБРЯ', 'ОКТЯБРЯ', 'НОЯБРЯ', 'ДЕКАБРЯ' ]
month_str = Months[ month - 1 ]

log * "Search for #{day} #{month_str}\n\n"

# calendar
log * "Parse drevo-info.ru site"
log * ( "*"*80 )

uri = 'http://drevo-info.ru/articles/list/14.html?page='
date_link = 'http://drevo-info.ru' +
(1..13).each do| i |
   drevo_cal = Nokogiri::HTML( open "#{uri}#{i}" )
   li =
   drevo_cal.css( 'li' ).each do| li |
      if li.content == "#{day} #{month_str}" # check 27 НОЯБРЯ
         break li
      end
   end
   if li.is_a? Nokogiri::XML::Element
      break li.css( 'a' ).attr( 'href' ).value
   end
end

memlist = []
tokens = []
if date_link.is_a? String
   drevo_date = Nokogiri::HTML( open date_link )

   seg = drevo_date.css( 'h2' ).each do| h2 |
      if h2.text == 'Память'
         break h2 ; end ; end

   if !seg.is_a? Array
      #TODO change to seg
      mem = drevo_date.css( '#article ul' )
      mem.css( 'li' ).each do| li |
         if li.content.strip =~ /^\d/
            next ; end
         tokens.concat( tokenize_line li, 'http://drevo-info.ru' )
      end
   end
end

parse_tokens memlist, tokens

parse_azbuka memlist

# convert to hashie
#
people = to_people memlist

# req for manual merges
merges = []
people.keys.each.with_index do| imja, i |
   $stderr.print "#{i}. #{imja.inspect}\n?> "
   line = $stdin.gets.strip rescue retry
   if !line.empty?
      if /^>(?<target>.*)/ =~ line || people[ line ]
         target ||= line
         memory = people[ target ]
         поплести_память memory, people.delete( imja )
      else
         people[ line ] = people.delete( imja ) ; end ; end ; end

azbuka_trops people

# Pravoslavie.ru parsing
log * "Parse Pravoslavie.ru site"
log * ( "*"*80 )

date_link = 'http://days.pravoslavie.ru/Days'
doc = open "#{date_link}/#{julian.strftime( "%Y%m%d" )}.htm"
prav_ru = Nokogiri::HTML doc.read

assign_trops( ( prav_ru.css '.trop' ),
              people, @services ) do| trop |
   names = trop.css( '.trop_title' ).inner_text.strip.gsub( /[,'\(\)]+/, '' ).split( /\s+/ )
   glas = trop.css( '.trop_glas' ).inner_text.scan(/\d+/).last
   text = trop.css( '.trop_text' ).inner_text.strip.gsub( /\s*(\/+)\s*/, ' \1 ' ).sub( /(?:\/\s*)?\/([^\/]+)$/, '//\1' )
   log * ( "#"*80 )
   log >> { names: names }
   [ names, glas, text, [ :dative, :genitive ] ] ; end

# pravicon.com search
log * "Pravicon.ru search"
log * ( "*"*80 )

agent = Mechanize.new
#agent.user_agent_alias = 'Windows IE 9'

people.each do| imja, memory |
   log >> { memory: memory }
   names = imja.strip.split( /\s+/ )
   if names.empty?
      next ; end

   log > { name: names }
   begin
      page = agent.get 'http://pravicon.com/'
      f = page.forms.first
      f.search = names.shift
      f.selectdb = memory.чин == 'обр' && 'b' || 's'
      log >> { form: f }
      content = f.submit( f.buttons.last ).content
      doc = Nokogiri::HTML content
   rescue
      next
   end

   uris = doc.css( '#content a' ).select do| a |
      log >> { 'match for' => a.content }
      names.reject {| name | a.content.include? name }.empty?
   end.map do| a |
      ( 'http://pravicon.com' + a.attr( 'href' ) )
   end

   if names.empty? && uris.size > 1
      next ; end
   case uris.size
   when 0
   when 1
      memory.образ = [ uris.last ]
      if !memory.бытие
         doc = Nokogiri::HTML( open uris.last )
         a = doc.css( ".spoiler a" )[ 0 ]
         if a
            memory.бытие = 'http://pravicon.com' + a.attr( 'href' ) ; end ; end
   else
      memory.образ = uris ; end ; end


people.keys.each do| imja |
   memory = people[ imja ]
   log > { imja: imja, memory: memory }
   memory.событие.год = memory.событие.год.select{|a|!a.empty?}.join( ' ' ).strip
   memory.событие.описание ||= 'прств'
   if memory.событие.год.to_i > 1700
     memory.помин.описание ||= 'прств'
     memory.событие.дата = sprintf( "%.2i.%.2i", day, month )
   else
     memory.помин.описание ||= 'само'
   end
   memory.помин.дата = sprintf( "%.2i.%.2i", day, month )
   memory.помин.служба = memory.помин.служба && memory.помин.служба.split( '/' ).last
   memory.фамилия = memory.фамилия.select{|a|!a.empty?}.join( ' ' ).strip
   if memory.прозвище.all? {|x| /^[А-ЯЁ][а-яё]+(ий|ая|ое)$/ =~ x }
     memory.прозвище = memory.прозвище.select{|a|!a.empty?}.reverse.join( ' ' ).strip
     memory.описание = memory.описание.select{|a|!a.empty?}.reverse.join( ' ' ).strip
   else
     memory.описание = memory.прозвище.select{|a|!a.empty?}.concat(memory.описание.select{|a|!a.empty?}).reverse.join( ' ' ).strip
     memory.прозвище = ''
   end
   if memory.событие.год =~ /19(\d\d)/
      num = $1.to_i 
      if num >= 17 && num <= 48
         memory.собор << 'нмр' ; end ; end
   memory.собор = memory.собор.select{|a|!a.empty?}.join( ',' ).strip
   memory.образ = memory.образ.select{|a|!a.empty?}.join( ',' ).strip
   if memory.описание =~ /Богородиц[аы]/
      memory.прозвище = ''
      memory.описание = 'образ Богородицы'
      memory.событие.описание = 'явл'
      memory.чин = 'обр'
   end

   people[ imja ] = memory.to_hash.reject! {| _, z | z.nil? || z.empty? } ; end

folder = 'памяти'
people.each do| ime, memory |
   dir = File.join( folder, ime )
   FileUtils.mkdir_p dir
   fn = File.join( dir, 'память.ро.yml' )
   if File.exists? fn
      h = File.open( fn, 'r' ) {| f | YAML.load( f.read )[ ime ] }
      h.each do| k, v |
         v || next
         if memory[ k ]
            case memory[ k ]
            when Hash
               memory[ k ] = [ memory[ k ], v.to_s ]
            when Array
               memory[ k ] << v.to_s
            when String
               memory[ k ] << ', ' + v.to_s
            else
               $stderr.puts "Error on #{memory[ k ]}, class #{memory[ k ].class}" ; end
         else
            memory[ k ] = v.to_s ; end ; end ; end if h

   File.open( fn, 'w' ) do| f |
      f.puts ({ ime => people[ ime ] }).to_yaml.gsub( /  /, '   ' ).gsub( / - /, '  - ' ).gsub( /(['\[\]]+|"|\s+$)/, '' )
      end ; end

@services.each do| ime, sluzxba |
   ime = ime.split( '/' )
   FileUtils.mkdir_p File.join( folder, ime[ 0 ] )
   File.open( File.join( folder, ime[ 0 ], ime[ 1 ].to_s ), 'w' ) do| f |
      f.puts sluzxba.to_yaml.gsub( /  /, '   ' ).gsub( / - /, '  - ' ).gsub( /(''|"|\s+$)/, '' ).gsub( /: !/, ':' )
   end
end

$stderr.puts people.keys.sort.join( "\n" )

Dir.foreach( "мѣсѧцесловъ/%02i" % month ) do| file |
   file =~ /^#{sprintf "%02i", day}.*\.hip$/ || next
   $stderr.puts file
   path = File.join( "мѣсѧцесловъ/%02i" % month, file )
   hip = File.open( path, 'r', encoding: 'Windows-1251' ) {| f | f.readlines }
   hip.map! do| line |
      line.encode( 'UTF-8' ).gsub( /\s*\(с\. \d+\)\s*|\s*\(с\.\s*$|^\d+\)\s*|\s+$/, '' ).gsub( /\s+/, ' ')
   end
   heap = hip[0...20].grep( /./ ).join( "\n" )
   heap << "\n" + '*' * 80
   $stderr.puts heap
   $stderr.print "имя ? "
   memory = nil
   name = nil
   while !memory
     name = $stdin.gets.strip
     memory = people[ name ] ; end
   pomin = memory[ 'помин' ]
   sluzxba = ( pomin.is_a?( Array ) && pomin[ 0 ] || pomin )[ 'служба' ]
   if !sluzxba
      rod = :male
      if memory[ 'чин' ] =~ /мц/
         rod = :female ; end
      $stderr.print "#{rod}:\nрод ? "
      rod1 = $stdin.gets.strip rescue 'f'
      if !rod1.empty?
         rod = /^m/ =~ rod1 && :male || :female ; end
      petro = Petrovich.new rod
      names = name.split /\s+/
      fservice = petro.firstname names.shift, :dative
      if !names.empty?
         lservice = petro.lastname names.last, :dative ; end
      sluzxba = [ fservice, lservice, 'служба' ].join( ' ' ) ; end

   fullname = File.join( "памяти", name, "#{sluzxba}.цс.hip" )
   i = 1
   while File.exist?( fullname )
      fullname = File.join( "памяти", name, "#{sluzxba}(#{i}).цс.hip" )
      i += 1 ; end

   File.open( fullname, 'w' ) do| f |
      f.puts hip.join( "\n" ) ; end
   `git add -f '#{fullname}'` ; end

`git add памяти`


h = people.keys.reduce({}) {| h, key | h[ key ] = nil ; h }
fn = File.join( "мѣсѧцесловъ/%02i/%02i.ро.yml" % [ month, day ] )
File.open( fn, 'w' ) {| f | f.puts h.to_yaml.gsub(/("|\s+$)/, '') }

`git add #{fn}`

files=`git status -s|grep "^[AM] "|sed "s/^.. //"`.split("\n")


log >> { files: files.join(' ') }
p = fork { exec "gvim -f #{files.join(' ')}" }
Process.wait p

files.each do| file |
   `git add -f #{file}`
end

