#!/usr/bin/env ruby
#coding: utf-8

require 'yaml'
require 'rdoba'
require 'open-uri'
require 'nokogiri'
require 'hashie'
require 'fileutils'
require 'petrovich'

rdoba :mixin => [ :case ], :log => { :functions => [ :* ] }

def drevo_person_line li
   def new_person
      person = Hashie::Mash.new
      person.имя = ''
      person.прозвище = []
      person.фамилия = []
      person.описание = []
      person.чин = nil
      person.год = nil
      person.собор = nil
      person.служба = nil
      person.вики = nil
      person.бытие = nil
      person.отечник = nil
      person.образ = []
      person
   end

   def set_name person, name
      names = name.split /\s+/
      имя = names.shift
      person.имя = имя && имя.strip || nil
      person.фамилия |= names
   end

   def proc_parts parts, person
      parts.each_index do| i |
         part = parts[ i ].strip
         if part =~ /^[а-яё]/ && part !~ /прмч|сщмч|мч/ || part =~ /^\(.*[\d\w\)]+.*\)$/
            begin
               parts[ i - 1 ] << ' ' + part
               parts[ i ] = nil
            rescue
               parts[ i ] = part ; end
         else
            parts[ i ] = part ; end ; end
      parts.compact
   end

   people = []
   mark = nil
   person = self.new_person
   parts = []
   text = ''
   li.children.each do| li_e |
      text = li_e.content.strip
      if li_e.is_a?( Nokogiri::XML::Element )
         if text =~ /^[А-ЯЁ]/ && !person.имя.empty?
            people << person
            person = self.new_person
         end
         person.имя << ' ' + text.gsub( /[,.]/, '' )
         if li_e.attr( 'href' ) !~ /find/ && text !~ /[\d\w]/
            person.вики = 'http://drevo-info.ru' + li_e.attr( 'href' ) ; end
      elsif text =~ /^(?:([А-ЯЁа-яё]+)\.|Икон)(.*)$/
         person.чин = ( $1 || 'обр' ).downcase
         person.имя = $2.strip.gsub( /[.,]/, '' )
      else
         text.split( ',' ).each do| part |
            part = part.strip
            if part =~ /^[А-ЯЁ]/
               people << person
               person = self.new_person
               person.имя = part
            elsif part =~ /^([а-яё]+)\.|икон.*$/
               people << person
               person = self.new_person
               person.чин = ( $1 || 'обр' ).downcase
            else
               person.имя << ' ' + part
            end
         end
      end
   end

   people << person

   people.each_index do| i |
      person = people[ i ]
      mode = nil
      имя = person.имя
      person.имя = ''
      имя.split( '(' ).each do| subtoken |
         subtoken = subtoken.strip
         if subtoken =~ /^(.+)\)/
            if subtoken =~ /^(.*(\d|\w)+.*)\)/
               person.год = $1.strip
               mode = :год
            elsif subtoken =~ /^(.*)\)/
               if mode
                  person.собор = $1.to_s.gsub( /[.,\s]+/, '' ).downcase
                  mode = :собор
               else
                  person.фамилия |= $1.to_s.split( /[,\s]+/ )
                  mode = :фамилия
               end
            else
               $stderr.puts "Invalid token #{subtoken}" ; end
         elsif subtoken =~ /[А-Яа-я\-]+/
            set_name person, subtoken
         end
      end
      text = ''

      if person.чин?
         mark = person.чин[ -1 ] == person.чин[ -2 ]
      end

   end

   people.compact!

   # set чин
   чин = nil
   people.each do| person |
      if person.чин
         if person.чин[ -1 ] == person.чин[ -2 ]
            чин = person.чин[ 0..-2 ]
            person.чин = чин
         else
            чин = person.чин
         end
      else
         person.чин = чин
      end
   end

   # set год
   год = nil
   people.reverse.each do| person |
      if person.год
         год = person.год
      else
         person.год = год
      end
   end

   # установка прозвища и описания
   people.each do| person |
      pro = []
      person.фамилия.map! do| part |
         if part =~ /^(.*)\((.*)\)(.*)$/
            pro << $1.to_s + $3.to_s
            $2
         else
            pro << part
            nil
         end
      end.compact!
      if pro.join =~ /икон/
         person.описание = pro
      else
         person.прозвище = pro
      end
   end

   # Обращение падежей в именительный
   people.each do| person |
      gen =
      if person.чин =~ /мц|обр/
         :female
      elsif !person.чин
         :androgynous
      else
         :male
      end
      petro = Petrovich.new gen

      if person.описание
         person.описание.map! do| v |
            petro.lastname v, :nominative, :genitive
         end
      end

      if person.фамилия
         person.фамилия.map! do| v |
            petro.lastname v, :nominative, :genitive
         end
      end

      if person.прозвище
         person.прозвище.map! do| v |
            petro.lastname v, :nominative, :genitive
         end
      end

      if person.имя
         имя = petro.firstname person.имя, :nominative, :genitive
         if имя = person.имя
            имя = petro.lastname person.имя, :nominative, :genitive
         end
         person.имя = имя
      end
   end
end

Months = [ 'ЯНВАРЯ', 'ФЕВРАЛЯ', 'МАРТА', 'АПРЕЛЯ', 'МАЯ', 'ИЮНЯ',
           'ИЮЛЯ', 'АВГУСТА', 'СЕНТЯБРЯ', 'ОКТЯБРЯ', 'НОЯБРЯ', 'ДЕКАБРЯ' ]

date = ARGV.shift
date =~ /(\d+)[\/\.](\d+)/
day = $1.to_i
month = $2.to_i
month_str = Months[ month - 1 ]

puts "Search for #{day} #{month_str}"

# calendar
uri = 'http://drevo-info.ru/articles/list/14.html?page='
date_link = 'http://drevo-info.ru' +
(1..4).each do| i |
   drevo_cal = Nokogiri::HTML( open "#{uri}#{i}" )
   li =
   drevo_cal.css( 'li' ).each do| li |
      if li.content == "#{day} #{month_str}" # check 27 НОЯБРЯ
         break li
      end
   end
   if li.is_a? Nokogiri::XML::Element
      break li.css( 'a' ).attr( 'href' ).value
   end
end

if date_link.is_a? String
   drevo_date = Nokogiri::HTML( open date_link )

   seg = drevo_date.css( 'h2' ).each do| h2 |
      if h2.text == 'Память'
         break h2 ; end ; end

   memlist = []
   if !seg.is_a? Array
      #TODO change to seg
      mem = drevo_date.css( '#article ul' )
      mem.css( 'li' ).each do| li |
         if li.content.strip =~ /^\d/
            next ; end
         ml = drevo_person_line li
         memlist |= ml
      end
   end
end

drevo_people = {}
memlist.each do| person |
   def detect_uniq_name person
      drevo_person = Nokogiri::HTML( open person.вики )
      name = drevo_person.css( 'h1' ).text.downcase.gsub( /[\d\(\)\-,]+/, '' )
      parts = name.strip.split( /\s+/ )
      parts.each {| part | part[ 0 ] = part[ 0 ].upcase }.join ' '
   end

   log >> { person: person }
   name =
   if person.вики
      detect_uniq_name person
   else
      [ person.имя, person.фамилия[ 0 ] || person.прозвище[ 0 ] ].compact.join ' '
   end
   log > { name: name }
   log >> '*'*80
   person.фамилия = person.фамилия.join ' '
   person.прозвище = person.прозвище.join ' '
   person.описание = person.описание.join ' '
   person.образ = !person.образ.empty? && person.образ || nil
   drevo_people[ name ] = person.to_hash
end

folder = sprintf "мѣсѧцесловъ/%2i/%2i", month, day
FileUtils.mkdir_p folder
File.open( File.join( folder, 'месяцеслов.ро.yml' ), 'w' ) do| f |
   f.puts drevo_people.to_yaml.gsub( /  /, '   ' ).gsub( /'/, '' ).gsub( /\s+$/, '' )
end


